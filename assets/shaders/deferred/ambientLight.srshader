#type common
#version 440
/*
 * PBR shader program for image-based lighting. Follows the Filament
 * material system (somewhat).
 * https://google.github.io/filament/Filament.md.html#materialsystem/standardmodel
 */

#type vertex
void main()
{
  vec2 position = vec2(gl_VertexID % 2, gl_VertexID / 2) * 4.0 - 1;

  gl_Position = vec4(position, 0.0, 1.0);
}

#type fragment
#define PI 3.141592654
#define MAX_MIP 4.0

// Camera specific uniforms.
layout(std140, binding = 0) uniform CameraBlock
{
  mat4 u_viewMatrix;
  mat4 u_projMatrix;
  mat4 u_invViewProjMatrix;
  vec3 u_camPosition;
  vec4 u_nearFar; // Near plane (x), far plane (y). z and w are unused.
};

// Ambient lighting specific uniforms.
layout(std140, binding = 4) uniform AmbientBlock
{
  vec3 u_intensity; // Screen size (x, y) and intensity (z).
};

// Samplers from the gbuffer and required lookup textures for IBL.
layout(binding = 0) uniform samplerCube irradianceMap;
layout(binding = 1) uniform samplerCube reflectanceMap;
layout(binding = 2) uniform sampler2D brdfLookUp;
layout(binding = 3) uniform sampler2D gPosition;
layout(binding = 4) uniform sampler2D gNormal;
layout(binding = 5) uniform sampler2D gAlbedo;
layout(binding = 6) uniform sampler2D gMatProp;

// Output colour variable.
layout(location = 0) out vec4 fragColour;

// Compute the Filament IBL contribution.
vec3 evaluateFilamentIBL(vec3 n, vec3 v, vec3 diffuseColour, vec3 f0, vec3 f90,
                         float roughness);

void main()
{
  vec2 fTexCoords = gl_FragCoord.xy / textureSize(gPosition, 0).xy;

  vec3 position = texture(gPosition, fTexCoords).xyz;
  vec3 normal = normalize(texture(gNormal, fTexCoords).xyz);
  vec3 albedo = texture(gAlbedo, fTexCoords).rgb;
  float metallic = texture(gMatProp, fTexCoords).r;
  float roughness = texture(gMatProp, fTexCoords).g;
  float ao = texture(gMatProp, fTexCoords).b;
  float emiss = texture(gMatProp, fTexCoords).a;
  float reflectance = texture(gAlbedo, fTexCoords).a;

  // Remap material properties.
  vec3 diffuseAlbedo = (1.0 - metallic) * albedo;
  vec3 mappedF0 = (0.16 * reflectance * reflectance).xxx * (1.0 - metallic) + albedo * metallic;

  // Dirty, setting f90 to 1.0.
  vec3 f90 = vec3(1.0);

  // Compute the FilamentIBL contribution.
  vec3 view = normalize(position - u_camPosition);
	vec3 radiance = evaluateFilamentIBL(normal, view, diffuseAlbedo, mappedF0, f90,
                                      roughness) * ao * u_intensity.z;
  // Add in emission.
  radiance += emiss * albedo;

  radiance = max(radiance, 0.0.xxx);
  fragColour = vec4(radiance, 1.0);
}

// Compute the Filament IBL contribution.
vec3 evaluateFilamentIBL(vec3 n, vec3 v, vec3 diffuseColour, vec3 f0, vec3 f90,
                         float roughness)
{
  float nDotV = max(dot(n, -v), 0.0);
  vec3 r = normalize(reflect(v, n));

  vec3 irradiance = texture(irradianceMap, n).rgb * diffuseColour;

  float lod = MAX_MIP * roughness;
  vec3 specularDecomp = textureLod(reflectanceMap, r, lod).rgb;
  vec2 splitSums = texture(brdfLookUp, vec2(nDotV, roughness)).rg;

  vec3 brdf = mix(splitSums.xxx, splitSums.yyy, f0);

  vec3 specularRadiance = brdf * specularDecomp;

  return irradiance + specularRadiance;
}
