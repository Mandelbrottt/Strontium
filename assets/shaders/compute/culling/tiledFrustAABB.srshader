#type compute
#version 440
/*
 * A compute shader to precompute the frustums and AABBs used in tiled
 * deferred rendering.
 */

#define GROUP_SIZE 8
#define FLT_MAX 3.402823466e+38

layout(local_size_x = GROUP_SIZE, local_size_y = GROUP_SIZE) in;
layout(binding = 0, r32f) uniform readonly image2D gDepth;

struct TileData
{
  // World space frustum normals, signed distance is packed in the w component.
  vec4 frustumPlanes[6];
  // World space tile AABB, only xyz are used.
  vec4 aabbCenter;
  vec4 aabbExtents;
};

// Camera specific uniforms.
layout(std140, binding = 0) uniform CameraBlock
{
  mat4 u_viewMatrix;
  mat4 u_projMatrix;
  mat4 u_invViewProjMatrix;
  vec3 u_camPosition;
  vec4 u_nearFar; // Near plane (x), far plane (y). z and w are unused.
};

layout(std140, binding = 1) buffer AABBandFrustum
{
  TileData frustumsAABBs[];
};

uint linearIndex(uvec2 groupID, uvec2 numGroups)
{
  return numGroups.x * groupID.x + groupID.y;
}

shared uint minDepth;
shared uint maxDepth;

void main()
{
  minDepth = uint(0xFFFFFFFF);
  maxDepth = 0;
  barrier();

  ivec2 coord = ivec2(gl_GlobalInvocationID.xy);

  float wDepth = imageLoad(gDepth, coord).r;
  uint depth = uint(wDepth * uint(0xFFFFFFFF));

  atomicMin(minDepth, depth);
  atomicMax(maxDepth, depth);
  barrier();

  float minDepthZ = float(minDepth) / float(0xFFFFFFFF);
  float maxDepthZ = float(maxDepth) / float(0xFFFFFFFF);

  vec2 screenSize = vec2(imageSize(gDepth).xy);
  // Min: xy, Max: zw.
  vec4 groupDims = vec4(vec2(gl_WorkGroupID.xy * GROUP_SIZE),
                        vec2(gl_WorkGroupID.xy * GROUP_SIZE + ivec2(GROUP_SIZE)));
  groupDims /= screenSize.xyxy;
  groupDims = 2.0 * groupDims - vec4(1.0);

  // Compute world space frustum corners. Definitely a better way to go about this...
  vec4 corners[8];
  // Near face.
  corners[0] = u_invViewProjMatrix * vec4(groupDims.xy, minDepthZ, 1.0);
  corners[1] = u_invViewProjMatrix * vec4(groupDims.xw, minDepthZ, 1.0);
  corners[2] = u_invViewProjMatrix * vec4(groupDims.zy, minDepthZ, 1.0);
  corners[3] = u_invViewProjMatrix * vec4(groupDims.zw, minDepthZ, 1.0);
  // Far face.
  corners[4] = u_invViewProjMatrix * vec4(groupDims.xy, maxDepthZ, 1.0);
  corners[5] = u_invViewProjMatrix * vec4(groupDims.xw, maxDepthZ, 1.0);
  corners[6] = u_invViewProjMatrix * vec4(groupDims.zy, maxDepthZ, 1.0);
  corners[7] = u_invViewProjMatrix * vec4(groupDims.zw, maxDepthZ, 1.0);

  vec3 minCorner = vec3(FLT_MAX);
  vec3 maxCorner = vec3(-1.0 * FLT_MAX);
  for (uint i = 0; i < 8; i++)
  {
    corners[i] /= corners[i].w;
    corners[i].w = 0.0;
    minCorner = min(minCorner, corners[i].xyz);
    maxCorner = max(maxCorner, corners[i].xyz);
  }
  vec3 center = (minCorner + maxCorner) / 2.0;
  vec3 extents = max(abs(minCorner), abs(maxCorner));

  TileData data;
  // Near plane.
  data.frustumPlanes[0].xyz = normalize(cross(corners[3].xyz - corners[1].xyz, corners[0].xyz - corners[1].xyz));
  data.frustumPlanes[0].w = dot(data.frustumPlanes[0].xyz, corners[1].xyz);
  // Far plane.
  data.frustumPlanes[1].xyz = normalize(cross(corners[4].xyz - corners[5].xyz, corners[7].xyz - corners[5].xyz));
  data.frustumPlanes[1].w = dot(data.frustumPlanes[1].xyz, corners[5].xyz);
  // Left plane.
  data.frustumPlanes[2].xyz = normalize(cross(corners[0].xyz - corners[1].xyz, corners[5].xyz - corners[1].xyz));
  data.frustumPlanes[2].w = dot(data.frustumPlanes[2].xyz, corners[1].xyz);
  // Right plane.
  data.frustumPlanes[3].xyz = normalize(cross(corners[7].xyz - corners[3].xyz, corners[2].xyz - corners[3].xyz));
  data.frustumPlanes[3].w = dot(data.frustumPlanes[3].xyz, corners[3].xyz);
  // Top plane.
  data.frustumPlanes[4].xyz = normalize(cross(corners[0].xyz - corners[6].xyz, corners[6].xyz - corners[6].xyz));
  data.frustumPlanes[4].w = dot(data.frustumPlanes[4].xyz, corners[6].xyz);
  // Bottom plane.
  data.frustumPlanes[5].xyz = normalize(cross(corners[5].xyz - corners[1].xyz, corners[3].xyz - corners[1].xyz));
  data.frustumPlanes[5].w = dot(data.frustumPlanes[5].xyz, corners[1].xyz);

  data.aabbCenter = vec4(center, 0.0);
  data.aabbExtents = vec4(extents, 0.0);

  uint insertIndex = linearIndex(gl_WorkGroupID.xy, gl_NumWorkGroups.xy);
  frustumsAABBs[insertIndex] = data;

  barrier();
}
