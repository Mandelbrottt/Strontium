#type compute
#version 440
/*
 * A volumetric directional light compute shader. Computes godrays at half
 * resolution with some dithering.
*/

#define PI 3.141592654

#define NUM_STEPS 50
#define G_SCATTERING 0.5

#define NUM_CASCADES 4
#define WARP 44.0

layout(local_size_x = 32, local_size_y = 32) in;

// The output texture for the volumetric effect.
layout(rgba16f, binding = 0) writeonly uniform image2D volumetric;

layout(binding = 1) uniform sampler2D gDepth;
layout(binding = 7) uniform sampler2D cascadeMaps[NUM_CASCADES]; // TODO: Texture arrays.

// Camera specific uniforms.
layout(std140, binding = 0) uniform CameraBlock
{
  mat4 u_viewMatrix;
  mat4 u_projMatrix;
  mat4 u_invViewProjMatrix;
  vec3 u_camPosition;
};

// Directional light uniforms.
layout(std140, binding = 5) uniform DirectionalBlock
{
  vec4 u_lColourIntensity;
  vec4 u_lDirection;
  vec2 u_screenSize;
};

layout(std140, binding = 7) uniform CascadedShadowBlock
{
  mat4 u_lightVP[NUM_CASCADES];
  float u_cascadeSplits[NUM_CASCADES];
  vec4 u_shadowParams; // Light bleed reduction (x), light size for PCSS (y), minimum PCF radius (z) and the bias multiplier (w).
};

layout(std140, binding = 0) buffer GodrayParams
{
  vec4 u_mieScatIntensity; // Mie scattering coefficients (x, y, z), light shaft intensity (w).
  vec4 u_mieAbsDensity; // Mie scattering coefficients (x, y, z), density (w).
};

// Helper functions.
float sampleDither(ivec2 coords);

// Mie phase function.
float getMiePhase(float cosTheta);

//------------------------------------------------------------------------------
// Shadow calculations. Cascaded exponential variance shadow mapping!
//------------------------------------------------------------------------------
float calcShadow(uint cascadeIndex, vec3 position);

void main()
{
  ivec2 invoke = ivec2(gl_GlobalInvocationID.xy);

  // Half resolution.
  ivec2 gBufferCoords = 2 * invoke;
  vec2 gBufferSize = textureSize(gDepth, 0).xy;
  vec2 gBufferUV = vec2(gBufferCoords) / gBufferSize;

  // Light properties.
  vec3 lightDir = normalize(u_lDirection.xyz);
  vec3 lightColour = u_lColourIntensity.xyz;
  float lightIntensity = u_lColourIntensity.w;
  float volumetricIntensity = u_mieScatIntensity.w;

  // Participating medium properties.
  float density = u_mieAbsDensity.w;
  vec3 mieScattering = density * u_mieScatIntensity.xyz * 0.01;
  vec3 mieAbsorption = density * u_mieAbsDensity.xyz * 0.01;
  vec3 extinction = (mieScattering + mieAbsorption);

  // Compute the starting position from the depth.
  vec2 xy = 2.0 * gBufferUV - 1.0;
  float z = 2.0 * texture(gDepth, gBufferUV).r - 1.0;
  vec4 posNDC = vec4(xy, z, 1.0);
  posNDC = u_invViewProjMatrix * posNDC;
  posNDC /= posNDC.w;

  // March from the camera position to the fragment position.
  vec3 endPos = posNDC.xyz;
  vec3 startPos = u_camPosition.xyz;
  vec3 ray = endPos - startPos;
  vec3 rayDir = normalize(ray);
  vec3 rayStep = ray / float(NUM_STEPS);
  float rayStepLength = length(rayStep);

  // Dither to add some noise.
  vec3 currentPos = startPos + (rayStep * sampleDither(gBufferCoords));

  vec3 fog = vec3(0.0);
  vec3 totalTransmittance = vec3(1.0);
  float miePhaseValue = getMiePhase(dot(lightDir, rayDir));

  // Integrate the light contribution and transmittance along the ray.
  for (uint i = 0; i < NUM_STEPS; i++)
  {
    float shadowFactor;
    vec4 clipSpacePos = u_viewMatrix * vec4(currentPos, 1.0);

    // Cascaded shadow maps.
    for (uint i = 0; i < NUM_CASCADES; i++)
    {
      if (clipSpacePos.z > -(u_cascadeSplits[i]))
      {
        shadowFactor = calcShadow(i, currentPos);
        break;
      }
    }

    vec3 sampleTransmittance = exp(-rayStepLength * extinction);
    totalTransmittance *= sampleTransmittance;

    vec3 inScattering = mieScattering * miePhaseValue;
    vec3 scatteringIntegral = (inScattering - inScattering * sampleTransmittance) / extinction;

    fog += scatteringIntegral * totalTransmittance * lightColour * lightIntensity * shadowFactor;

    currentPos += rayStep;
  }

  fog *= volumetricIntensity;
  fog = max(fog, vec3(0.0));
  imageStore(volumetric, invoke, vec4(fog, totalTransmittance));
}

float sampleDither(ivec2 coords)
{
  const mat4 ditherMatrix = mat4
  (
    vec4(0.0, 0.5, 0.125, 0.625),
    vec4(0.75, 0.22, 0.875, 0.375),
    vec4(0.1875, 0.6875, 0.0625, 0.5625),
    vec4(0.9375, 0.4375, 0.8125, 0.3125)
  );

  return ditherMatrix[coords.x % 4][coords.y % 4];
}

float getMiePhase(float cosTheta)
{
  float result = 1.0 - G_SCATTERING * G_SCATTERING;
  result /= (4.0 * PI * pow(1.0 + G_SCATTERING * G_SCATTERING - (2.0 * G_SCATTERING) * cosTheta, 1.5));
  return result;
}

float offsetLookup(sampler2D map, vec2 loc, vec2 offset, float depth)
{
  vec2 texel = 1.0 / textureSize(map, 0).xy;
  return float(texture(map, vec2(loc.xy + offset * texel)).r >= depth);
}

// Calculate if the fragment is in shadow or not, than shadow mapping.
float calcShadow(uint cascadeIndex, vec3 position)
{
  float bias = u_shadowParams.w;
  vec4 lightClipPos = u_lightVP[cascadeIndex] * vec4(position, 1.0);
  vec3 projCoords = lightClipPos.xyz / lightClipPos.w;
  projCoords = 0.5 * projCoords + 0.5;

  return offsetLookup(cascadeMaps[cascadeIndex], projCoords.xy, 0.0.xx,
                      projCoords.z - bias);
}
