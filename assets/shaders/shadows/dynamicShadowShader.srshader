#type common
#version 440
/*
 * A directional light shadow shader for dynamic meshes. Exponentially-warped
 * variance shadowmaps.
 */

#type vertex
#define MAX_BONES_PER_MODEL 512

layout (location = 0) in vec4 vPosition;
layout (location = 5) in vec4 vBoneWeight;
layout (location = 6) in ivec4 vBoneID;

layout(std140, binding = 2) uniform ModelBlock
{
  mat4 u_modelMatrix;
};

layout(std140, binding = 6) uniform LightSpaceBlock
{
  mat4 u_lightViewProj;
};

layout(std140, binding = 4) readonly buffer BoneBlock
{
  mat4 u_boneMatrices[MAX_BONES_PER_MODEL];
};

void main()
{
  // Skinning calculations.
  mat4 skinMatrix = vBoneID.x > -1 ? u_boneMatrices[vBoneID.x] * vBoneWeight.x
                                   : mat4(1.0);
  skinMatrix += u_boneMatrices[vBoneID.y] * vBoneWeight.y;
  skinMatrix += u_boneMatrices[vBoneID.z] * vBoneWeight.z;
  skinMatrix += u_boneMatrices[vBoneID.w] * vBoneWeight.w;

  mat4 worldSpaceMatrix = u_modelMatrix * skinMatrix;

  gl_Position = u_lightViewProj * worldSpaceMatrix * vPosition;
}


#type fragment
#define WARP 44.0

layout(location = 0) out vec4 fragColour;

void main()
{
  float depth = gl_FragCoord.z;
  float dzdx = dFdx(depth);
  float dzdy = dFdy(depth);

  float posMom1 = exp(WARP * depth);
  float negMom1 = -1.0 * exp(-1.0 * WARP * depth);

  float posdFdx = WARP * posMom1 * dzdx;
  float posdFdy = WARP * posMom1 * dzdy;
  float posMom2 = posMom1 * posMom1 + (0.25 * (posdFdx * posdFdx + posdFdy * posdFdy));

  float negdFdx = -1.0 * WARP * negMom1 * dzdx;
  float negdFdy = -1.0 * WARP * negMom1 * dzdy;
  float negMom2 = negMom1 * negMom1 + (0.25 * (negdFdx * negdFdx + negdFdy * negdFdy));

  fragColour = vec4(posMom1, posMom2, negMom1, negMom2);
}
